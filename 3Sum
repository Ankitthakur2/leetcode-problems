Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-10^5 <= nums[i] <= 10^5


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
     
         vector<vector<int>>  vec;
        set<vector<int>> s;
        vector<vector<int>> ans;
           if(nums.size()<3)
                return ans;
            sort(nums.begin(),nums.end());
      
        for(int k=0;k<nums.size()-2;k++)
        {
            int i=k+1;
            int j=nums.size()-1;
            while(i<j)
            {
             if(nums[i]+nums[j]+nums[k]<0)
             {
                 i++;
             }
                else if(nums[i]+nums[j]+nums[k]>0)
                {
                    j--;
                }
                
                else if(nums[i]+nums[j]+nums[k]==0)
                {
                    vector<int> v;
                    v.push_back(nums[k]);
                    v.push_back(nums[i]);
                    v.push_back(nums[j]);
                    s.insert(v);
                   while(i<j && nums[i]==nums[i-1])
                       i++;
                    while(i<j && nums[j]==nums[j-1])
                        j--;
                    
                    i++;
                    j--;
                    
                    
                }
                }
            }
        
        for(auto i=s.begin();i!=s.end();i++)
        {
            vec.push_back(*i);
        }
        
        return vec;
    }
};
