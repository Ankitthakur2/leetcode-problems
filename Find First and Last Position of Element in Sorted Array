Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non-decreasing array.
-10^9 <= target <= 10^9

class Solution {
public:
  int losearch(int target,vector<int> &nums,int n)
{
      int left=0;
      int right=n-1;
      int mid;
      int index=-1;
    while(left<=right)
    {
        mid=left+(right-left)/2;
        if(nums[mid]==target)
        {
            index=mid;
            right=mid-1;
        }
        else if(nums[mid]<target)
            left=mid+1;
        else
            right=mid-1;
        
    }
    return index;
}
    
    int upsearch(int target,vector<int> &nums,int n)
{
        int left=0;
       int right=n-1;
      int mid;
       int index=-1;
    while(left<=right)
    {
        mid=left+(right-left)/2;
        if(nums[mid]==target)
        {
            index=mid;
            left=mid+1;
        }
        else if(nums[mid]>target)
            right=mid-1;
        else
            left=mid+1;
        
    }
    return index;

   
}
    
    vector<int> searchRange(vector<int>& nums, int target) {
         vector<int> v(2);
        int n=nums.size();
      v[1]=upsearch(target,nums,n);
      v[0]=losearch(target,nums,n);
         return v;
        }
};
