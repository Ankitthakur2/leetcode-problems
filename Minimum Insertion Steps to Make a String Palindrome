Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we don't need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
Example 4:

Input: s = "g"
Output: 0
Example 5:

Input: s = "no"
Output: 1
 

Constraints:

1 <= s.length <= 500
All characters of s are lower case English letters.

class Solution {
public:
    int minInsertions(string s) {
       int n=s.length();
        
        vector<vector<int>> dp(n+1,vector<int> (n+1,0));
        string t=s;
        reverse(t.begin(),t.end());
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<n+1;j++)
            {
                if(s[i-1]==t[j-1])
                {
                 dp[i][j]=1+dp[i-1][j-1];   
                }
                else
                {
                 dp[i][j]=max(dp[i][j-1],dp[i-1][j]);   
                }
                
            }
            
        }
      return n-dp[n][n];  
        
    }
};
