Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.

 

Example 1:

Input: s = "dfa12321afd"
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.
Example 2:

Input: s = "abc1111"
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters and/or digits.


class Solution {
public:
    int secondHighest(string s) {
        int maxi=0,ele=0;
        int ele2=-1,snd=-1;
        for(int i=0;i<s.length();i++)
        {
            if(s[i]>='0' && s[i]<='9')
            {
                ele=s[i]-'0';
               maxi= max(maxi,ele);
            }
        }
       
        for(int i=0;i<s.length();i++)
        {
            if(s[i]>='0' && s[i]<='9' && (s[i]-'0')<maxi)
                ele2=s[i]-'0';
            snd=max(snd,ele2);
        }
        
        return snd;
        
    }
};
