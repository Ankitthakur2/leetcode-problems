Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

class Solution {
public:
     
   void solution(string digits,vector<string> &vs,string s)
    {
        unordered_map<int,string> m;
        
        m[2]="abc";m[3]="def";m[4]="ghi";m[5]="jkl";m[6]="mno";
        m[7]="pqrs";m[8]="tuv";m[9]="wxyz";
       if(digits.empty())
        {
            vs.push_back(s);
            return;
        }
        
        string str=m[digits[0]-'0'];
        
        for(int i=0;i<str.length();i++)
        {
            
            solution(digits.substr(1),vs,s+str[i]);
            
        }
        
        
        
    }
    vector<string> letterCombinations(string digits) {
     
          vector<string> vs;
        if(digits.size()==0)
            return vs;
        solution(digits,vs,"");
        return vs;
        
    }
};
