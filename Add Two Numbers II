You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
 

Follow up: Could you solve it without reversing the input lists?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
                if(head==NULL || head->next==NULL)
             return head;
        ListNode* curr=head;
        ListNode* next;
        ListNode* prev=NULL;
         while(curr)
        {
          next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            }
        head=prev;
        return head;
    
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        
       l1= reverse(l1);
        l2=reverse(l2);
        
        ListNode *ans=NULL;
        ListNode *ptr=NULL;
        int sum=0,carry=0;
        ListNode *tyr= new ListNode(0);
         ListNode *ll=tyr;
        while(l1!=NULL || l2!=NULL)
        {
            if(l1!=NULL)
            sum=(l1->val);
            else
                sum=0;
            if(l2!=NULL)
                sum=sum+l2->val;
            sum=sum+carry;
            
            
            if(sum>=10)
                carry=1;
            else
                carry=0;
            
            sum=sum%10;
            
            ListNode *temp=new ListNode(sum);
            
       
            ll->next=temp;
            ll=ll->next;
            if(l1)
                l1=l1->next;
            if(l2)
                l2=l2->next;
            
            
        }
        
      
        if(carry>0)
            ll->next=new ListNode(carry);
        tyr= reverse(tyr->next);
        
        return tyr;
        
    }
};
