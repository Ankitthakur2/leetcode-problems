Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 10^4
t.length == s.length
s and t consist of any valid ascii character.

class Solution {
public:
    
    bool solve(string s,string t)
    {
        unordered_map<char,char> m;
      for(int i=0;i<s.length();i++)
        {
            if(m.find(s[i])==m.end() )
            m[s[i]]=t[i];
            else if(m[s[i]]!=t[i] )
                return false;
         
        }
        return true;
    }    
    
    
    
    bool isIsomorphic(string s, string t) {
        if(s.length()!=t.length())
            return false;
        
        
       return solve(s,t) && solve(t,s);
    }
};

