Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)

(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)

Since the answer may be large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.
Example 2:

Input: n = 100
Output: 682289015
 

Constraints:

1 <= n <= 100

class Solution {
public:
    int mod=1e9+7;
    long long int fact(long long int n)
    {
        if(n==0)
            return 1;
        
        return ((n%mod)*(fact(n-1)%mod))%mod;
        
    }
    int numPrimeArrangements(int n) {
        
        vector<bool> sieve(n+1,true);
       long long int prime=0;
       long long int nonprime=1;
        for(int i=2;i*i<=n;i++)
        {
            if(sieve[i])
            {
                
                for(int j=i*i;j<=n;j=j+i)
                {
                    sieve[j]=false;
                }
                
                
            }
        }
        
       
        
        for(int i=2;i<=n;i++)
        {
            if(sieve[i])
                prime++;
            else
                nonprime++;
                
        }
        
     
        
        
      prime=fact(prime)%mod;
      nonprime=fact(nonprime)%mod;
        
        int ans=(prime*nonprime)%mod;
        
        
        
        return ans;
        
        
        
        
    }
};
