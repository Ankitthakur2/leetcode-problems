Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
   void preorder(TreeNode* root,string s,vector<string> &vs)
   {
       if(root==NULL)
           return;
       
       s=s+to_string(root->val);
       
       if(root->left==NULL && root->right==NULL)
       {
           vs.push_back(s);
           return;
       }
        
       s+="->";
       preorder(root->left,s,vs);
       
       preorder(root->right,s,vs);
       
       
   }
    vector<string> binaryTreePaths(TreeNode* root) {
          vector<string> vs;
           string s;
        if(root==NULL)
              return vs;
        preorder(root,s,vs);
        
        return vs;
        
    }
};
