Given the head of a singly linked list, return true if it is a palindrome.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* slow=head;
        
         ListNode* fast=head;
        
        while(fast && fast->next)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        
        if(fast)
         slow=slow->next;        
        
        
         ListNode *curr=slow;
        ListNode *prev=NULL;
            ListNode *next;
        while(curr)
        {
         next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        
        curr=prev;
        
        while(curr)
        {
            if(curr->val == head->val)
            {
                curr=curr->next;
                head=head->next;
            }
            else
                return false;
        }
        
        return true;
    }
};
