Given the root of a binary search tree, and an integer k, return the kth (1-indexed) smallest element in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 10^4
0 <= Node.val <= 10^4
 

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   int count;
    int ans;
 
    void  solve(TreeNode* root)
  {
        if(root==NULL)
         return;
            
        solve(root->left);
          
        count--;
      
        if(count==0)
       {
           ans= root->val;
            return;
          
       }
        
      solve(root->right);
      
      
          
  }
    int kthSmallest(TreeNode* root, int k) {
       if(root==NULL)
           return 0;
        count=k;
         solve(root);
       return ans;
    }
};
