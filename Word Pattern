Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", s = "dog dog dog dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lower-case English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.


class Solution {
public:
   
    bool solve1(string pattern,vector<string> &vs)
    {
       unordered_map<char,string> m;
        
    for(int i=0;i<pattern.length();i++)
        {
               if(m.find(pattern[i])==m.end())
                   m[pattern[i]]=vs[i];
           else 
           {
               if(m[pattern[i]]!=vs[i])
                   return false;
           }
        
        }
    
         return true;
    }
    
    
    bool solve2(string pattern,vector<string> &vs)
    {
        unordered_map<string,char> m;
        
        for(int i=0;i<pattern.length();i++)
        {
            if(m.find(vs[i])==m.end())
                m[vs[i]]=pattern[i];
            else
            {
                 if(m[vs[i]]!=pattern[i])
                     return false;
            }
        }
        return true;
    }
    bool wordPattern(string pattern, string s) {
        
        stringstream obj(s);
        vector<string> vs;
        string s1;
        while(obj>>s1)
            vs.push_back(s1);
        
        if(pattern.length()!=vs.size())
            return false;
        
       
        return solve1(pattern,vs) && solve2(pattern,vs);
        
    }
};
