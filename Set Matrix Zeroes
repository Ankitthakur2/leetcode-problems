Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-2^31 <= matrix[i][j] <= 2^31 - 1
 

Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?


class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
     
        queue<pair<int,int>> pq;
        int m=matrix.size();
        int n=matrix[0].size();
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(matrix[i][j]==0)
                pq.push({i,j});
            }
        }
        
       while(!pq.empty())
       {
           pair<int,int> p=pq.front();
            pq.pop();
           int x=p.first;
           int y=p.second;
          
           
           for(int i=0;i<n;i++)
               matrix[x][i]=0;
           for(int j=0;j<m;j++)
               matrix[j][y]=0;
               
           
       }
        
        
    }
    
};
