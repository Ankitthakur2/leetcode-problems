Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 10^5
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?

class Solution {
public:
    string minWindow(string s, string t) {
        
        unordered_map<char,int> m;
        
        unordered_map<char,int> m1;
        for(int i=0;i<t.length();i++)
        {
            m[t[i]]++;
        }
        
        int i=0,j=0,count=0;
        int n=s.length();
        string ans;
        while(j<n)
        {
            if(m[s[j]]>m1[s[j]])
                count++;
            m1[s[j]]++;
            
            while(count==t.length())
            {
                
                if(j-i+1<ans.length() || ans.empty())
                    ans=s.substr(i,j-i+1);
                
                if(m[s[i]]==m1[s[i]])
                    count--;
                m1[s[i]]--;
                i++;
                
            }
            
            j++;
            
        }
        
        return ans;
    }
};
