


Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 5 * 10^4
s consists of English letters, digits, symbols and spaces.


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i=0,j=0;
        int n=s.length();
        unordered_map<char,int> m;
        string ans;
        
        while(j<n)
        {
            
            m[s[j]]++;
            
            while(m[s[j]]>1)
            {
                if(m[s[i]]==1)
                    m.erase(s[i]);
                else if(m[s[i]]==2)
                    m[s[i]]--;
                
                i++;
                
            }
            
            if(ans.empty() || ans.length()<(j-i+1))
            {
                  ans=s.substr(i,(j-i+1));
            }
            
           j++; 
        }
      
        
        return ans.length();
    }
};


