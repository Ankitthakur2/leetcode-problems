Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        vector<vector<int>> v;
        
        if(root==NULL)
            return v;
        queue<TreeNode*> q;
        q.push(root);
        int level=0;
        
        while(!q.empty())
        {
            int size=q.size();
            
            vector<int> ans;
            
            while(size--)
            {
                TreeNode *ele=q.front();
                q.pop();
                if(level%2==0)
                ans.push_back(ele->val);
                if(level%2==1)
                    ans.insert(ans.begin(),ele->val);
                if(ele->left)
                    q.push(ele->left);
                if(ele->right)
                    q.push(ele->right);
                
            }
            level++;
            v.push_back(ans);
            
        }
        
     return v;   
    }
};
