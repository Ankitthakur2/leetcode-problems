Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

class Solution {
public:
 
    string frequencySort(string s) {
        
    priority_queue<pair<int,char>> pq;
        map<char,int> m;
        string s1;
        for(int i=0;i<s.length();i++)
        {
            
            m[s[i]]++;
            
        }
    
        for(auto i=m.begin();i!=m.end();i++)
        {
            pq.push({i->second,i->first});
            
        }
        
        while(pq.size()!=0)
        {
            int i=0;
            while(i<pq.top().first)
            {
            s1.push_back(pq.top().second);
                i++;
            }
            pq.pop();
        }
       
   return s1;
    }
};
