Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        long sum=0;
        bool res;
        for(int i=0;i<n;i++)
            sum=sum+nums[i];
        if(sum&1)
            return false;
        else
        {
            sum=sum/2;
            bool dp[n+1][sum+1];
            
            for(int j=0;j<sum+1;j++)
                dp[0][j]=false;
            for(int i=0;i<n+1;i++)
                dp[i][0]=true;
            
            for(int i=1;i<n+1;i++)
            {
                for(int j=1;j<sum+1;j++)
                {
                    if(nums[i-1]<=j)
                    {
                        dp[i][j]= dp[i-1][j-nums[i-1]] || dp[i-1][j];
                    }
                    else
                       dp[i][j] =dp[i-1][j];
                }
                
            }
            
            
            res=dp[n][sum];
            
        }
        
        return res;
        
    }
};
