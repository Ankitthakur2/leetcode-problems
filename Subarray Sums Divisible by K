Given an array nums of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by k.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
 

Note:

1 <= nums.length <= 30000
-10000 <= nums[i] <= 10000
2 <= k <= 10000


class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        
        long long int sum=0;
        unordered_map<int,int> m;
           int n=nums.size();
        int count=0;
        m[0]=1;
        for(int i=0;i<n;i++)
        {
            sum=sum+nums[i];
            int rem=(sum%k);
            if(rem<0)
                rem=rem+k;
            if(m.find(rem)!=m.end())
               {
               count=count+m[rem];
                   m[rem]++;
                   }
                 else
                  m[rem]=1;
            
            }
            
        return count;
    }
};
