In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].

Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.

 

Example 1:

Input: barcodes = [1,1,1,2,2,2]
Output: [2,1,2,1,2,1]
Example 2:

Input: barcodes = [1,1,1,1,2,2,3,3]
Output: [1,3,1,3,1,2,1,2]
 

Constraints:

1 <= barcodes.length <= 10000
1 <= barcodes[i] <= 10000

class Solution {
public:
    vector<int> rearrangeBarcodes(vector<int>& barcodes) {
         vector<int> result;
        unordered_map<int, int> barmap;
        for (int i=0; i<barcodes.size();i++) {
            barmap[barcodes[i]]++;
        }
        priority_queue<pair<int, int>> pq;
        for (auto it=barmap.begin();it!=barmap.end();it++) {
            pq.push({it->second, it->first});
        }
        while (!pq.empty()) {
            pair<int, int> cur1 = pq.top(), cur2;
            pq.pop();
            result.push_back(cur1.second);
            cur1.first--;
            if (!pq.empty()) {
                cur2 = pq.top();
                pq.pop();
                result.push_back(cur2.second);
                cur2.first--;
            }
            if (cur1.first > 0) {
                pq.push(cur1);
            }
            if (cur2.first > 0) {
                pq.push(cur2);
            }
        }
        return result;
    }
};
