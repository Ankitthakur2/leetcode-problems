Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> vec;
        
        int m=matrix.size();
        int n=matrix[0].size();
        int size=m*n;
        
        int count=0;
        
        int rstart=0,cstart=0;
        int rend=m-1,cend=n-1;
        
        
        while(count<size)
        {
            
            for(int i=cstart;i<=cend && count<size;i++)
            {
                vec.push_back(matrix[rstart][i]);
                count++;
            }
            
            rstart++;
            
            for(int i=rstart;i<=rend && count<size;i++)
            {
                
                vec.push_back(matrix[i][cend]);
                count++;
            }
            
            cend--;
            
            for(int i=cend;i>=cstart && count<size;i--)
            {
                
                vec.push_back(matrix[rend][i]);
                count++;
            }
            
            rend--;
            
            for(int i=rend;i>=rstart && count<size;i--)
            {
                vec.push_back(matrix[i][cstart]);
                count++;
                
            }
            
            cstart++;
            
            
            
            
            
        }
        
        
        
        
        return vec;
    }
};
